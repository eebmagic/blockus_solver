SHORT TERM:
- Tweak color smoothing and exposure to optimize piece colors
    - adjust color smoothing (attempt to mimic smooth_sample.png)
    - variably adjust brightness based on initial image color brightness
    - perhaps use sklearn for group classification of colors
        - would require long amount of time (maybe over class weekend?)

- Use HoughLines to figure out piece sizes
    - using smallest parallel distances



LONG TERM:
- Identify piece and arrangements
    - Hard code piece arrangements, by number of squares
    - Use contour fitting on color mask?
        - https://docs.opencv.org/3.4.9/dd/d49/tutorial_py_contour_features.html

- Find solution
    - Let user pick their color
    - DFS / BFS and return largest usable piece?
